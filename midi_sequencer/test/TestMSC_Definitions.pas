unit TestMSC_Definitions;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SysUtils, AnsiStrings, MMSystem, Wintypes, Classes, Messages,
   MSC_Circular_Buffer, MSC_Definitions;

type
   // Test methods for class TMIDI_Event

   TestTMIDI_Event = class(TTestCase)
   strict private
      FMIDI_Event: TMIDI_Event;
   public
      procedure SetUp; override;
      procedure TearDown; override;
   published
      procedure Testwrite_event;
      procedure Testsave;
      procedure Testcopy_event;
   end;
   // Test methods for class TMeta_Event

   TestTMeta_Event = class(TTestCase)
   strict private
      FMeta_Event: TMeta_Event;
   public
      procedure SetUp; override;
      procedure TearDown; override;
   published
      procedure Testwrite_event;
   end;
   // Test methods for class TMyMidiHdr

   TestTMyMidiHdr = class(TTestCase)
   strict private
      FMyMidiHdr: TMyMidiHdr;
   public
      procedure SetUp; override;
      procedure TearDown; override;
   end;

implementation

procedure TestTMIDI_Event.SetUp;
begin
   FMIDI_Event := TMIDI_Event.Create (10, 8, mc_MIDI_Note_On, 60, 120);
   FMIDI_Event.Port := 1;
end;

procedure TestTMIDI_Event.TearDown;
begin
   FMIDI_Event.Free;
   FMIDI_Event := nil;
end;

procedure TestTMIDI_Event.Testwrite_event;
var f: TMIDI_File;
    event: TMIDI_Event;
begin
   event := TMIDI_Event.Create;
   AssignFile (f, 'test.mid');
   ReWrite (f);
   FMIDI_Event.write_event (f);
   CloseFile (f);
   AssignFile (f, 'test.mid');
   Reset (f);
   event.read_event (f);
   CloseFile (f);

// When writing to file, the first event always starts at zero
   CheckEquals (0,                       event.Time);
   CheckEquals (FMIDI_Event.Channel,     event.Channel);
   CheckEquals (FMIDI_Event.Event_Type,  event.Event_Type);
   CheckEquals (FMIDI_Event.Data_Byte_1, event.Data_Byte_1);
   CheckEquals (FMIDI_Event.Data_Byte_2, event.Data_Byte_2);
end; // Testwrite_event //

procedure TestTMIDI_Event.Testsave;
var f: System.Text;
    event: TMIDI_Event;
begin
   event := TMIDI_Event.Create;
   AssignFile (f, 'test.txt');
   ReWrite (f);
   FMIDI_Event.save(f);
   CloseFile (f);
   AssignFile (f, 'test.txt');
   Reset (f);
   event.load (f);
   CloseFile (f);

// When writing to file, the first event always starts at zero
   CheckEquals (FMIDI_Event.Time,        event.Time);
   CheckEquals (FMIDI_Event.Channel,     event.Channel);
   CheckEquals (FMIDI_Event.Event_Type,  event.Event_Type);
   CheckEquals (FMIDI_Event.Data_Byte_1, event.Data_Byte_1);
   CheckEquals (FMIDI_Event.Data_Byte_2, event.Data_Byte_2);
   CheckEquals (FMIDI_Event.Port,        event.Port);
end; // Testsave //

procedure TestTMIDI_Event.Testcopy_event;
var
   event: TMIDI_Event;
begin
   event := FMIDI_Event.copy_event;
   CheckEquals (FMIDI_Event.Time,        event.Time);
   CheckEquals (FMIDI_Event.Channel,     event.Channel);
   CheckEquals (FMIDI_Event.Event_Type,  event.Event_Type);
   CheckEquals (FMIDI_Event.Data_Byte_1, event.Data_Byte_1);
   CheckEquals (FMIDI_Event.Data_Byte_2, event.Data_Byte_2);
   CheckEquals (FMIDI_Event.Port,        event.Port);
end; // Testcopy_event //

procedure TestTMeta_Event.SetUp;
begin
   FMeta_Event := TMeta_Event.Create (mc_Meta_Copyright_Notice, 'MuSoft (c) 2010');
end; // SetUp //

procedure TestTMeta_Event.TearDown;
begin
   FMeta_Event.Free;
   FMeta_Event := nil;
end;

procedure TestTMeta_Event.Testwrite_event;
var f: TMIDI_File;
    event: TMeta_Event;
begin
   event := FMeta_Event.Create (0, '');
   AssignFile (f, 'test.mid');
   ReWrite (f);
   FMeta_Event.write_event (f);
   CloseFile (f);
   AssignFile (f, 'test.mid');
   Reset (f);
   event.read_event (f);
   CloseFile (f);

// When writing to file, the first event always starts at zero
   CheckEquals (0,                       event.Time);
   CheckEquals (FMeta_Event.Event_Type,  event.Event_Type);
   CheckEquals (FMeta_Event.Data_Byte_1, event.Data_Byte_1);
   CheckEquals (FMeta_Event.Data_Byte_2, event.Data_Byte_2);
   CheckEquals (FMeta_Event.Text,        event.Text);
end;

procedure TestTMyMidiHdr.SetUp;
begin
   FMyMidiHdr := TMyMidiHdr.Create (1024);
end;

procedure TestTMyMidiHdr.TearDown;
begin
   FMyMidiHdr.Free;
   FMyMidiHdr := nil;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTMIDI_Event.Suite);
  RegisterTest(TestTMeta_Event.Suite);
  RegisterTest(TestTMyMidiHdr.Suite);
end.

